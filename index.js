'use strict';

var http = require('http');
var https = require('https');
var url = require('url');
var minimist = require('minimist');
var argv;
var port = 3001;
var host = '0.0.0.0';
var webHookURL;
var groupRestrict;
var slackHost;

function startServer(port, ip, webHookURL, slackHost, groupRestrict) {
  var server = http.createServer(function(req, res) {
    var parsed = url.parse(req.url, true);

    if (typeof groupRestrict !== 'undefined' && parsed.query.team_id !== groupRestrict) {
      return res.end('');
    }

    if (parsed.pathname === '/says') {
      var who = parsed.query.who || 'ben';
      var text = parsed.query.text || '';
      text = encodeURIComponent(text);

      var echoChannel = parsed.query.channel_id;

      var output = JSON.stringify({
        username: 'Saysbot',
        icon_emoji: ':robot_face:',
        channel: echoChannel,
        text: 'https://omgmog.net/says/?who=' + who + '&text=' + text + ' (generated by @' + parsed.query.user_name + ')'
      });

      var post = https.request({
        host: slackHost,
        method: 'POST',
        path: webHookURL,
        headers: {
          'Content-Type': 'application/json',
          'Content-Length': output.length
        }
      }, function(res) {
        res.setEncoding('utf8');
        res.on('data', function(chunk) {
          console.log('response', chunk);
        });
      });

      post.write(output);
      post.end();
      res.end('Alright, generating image... Do you think ' + who + ' would mind this?');
    } else {
      res.end('That did not work...');
    }
  });
  server.listen(port, ip);
  console.log('listening on', ip + ':' + port);
}

if (!module.parent) {
  argv = minimist(process.argv.slice(2));
  host = argv.host || host;
  port = argv.port || port;
  groupRestrict = argv.group || groupRestrict;
  slackHost = argv.slack || slackHost;
  webHookURL = argv.webHookURL || webHookURL;

  console.log(slackHost, webHookURL);

  if (typeof webHookURL === 'undefined' || typeof slackHost === 'undefined') {
    console.log('You need a webhook URL and a slack hostname to continue');
  }

  startServer(port, host, webHookURL, slackHost, groupRestrict);
}
